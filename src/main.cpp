#include <sockets/sockets.h>
#include <tls/connection.h>

#include <tls/data/asn1.h>

#include <encryption/rsa.h>

#include <vector>

#include <encryption/int.h>

#include <fmt/printf.h>

using namespace encryption;

std::string binString(const std::vector<uint8_t> &data) {
    std::stringstream result;

    result << "0x";

    for (uint8_t a : data) {
        result << fmt::format("{:0>2X}", a);
    }

    return result.str();
}

int main() {
//    sockets::ClientSocket conn(443, { 216, 58, 211, 110 });
//
//    tls::Connection tls(tls::Type::Client, [&conn](uint8_t *data, size_t size) {
//        return conn.read(data, size);
//    }, [&conn](uint8_t *data, size_t size) {
//        return conn.write(data, size);
//    });
//
//    tls.run();

    std::vector<uint8_t> publicKeyAsn1 = {
       0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xb4, 0xd9, 0xd0, 0xa2, 0xcf, 0x3c, 0x19, 0xf1, 0x9d, 0xd9, 0x57, 0x03, 0x16, 0x23, 0x36, 0xfa, 0xda, 0x9f, 0x0c, 0x48, 0x72, 0x2d, 0xf5, 0x44, 0x0f, 0x76, 0x20, 0x62, 0xe5, 0x1b, 0xcd, 0x8e, 0xff, 0x52, 0x4e, 0xc7, 0x5e, 0x27, 0xe5, 0xcb, 0x98, 0x21, 0xc8, 0x34, 0x7d, 0x39, 0xbd, 0xa2, 0x02, 0x0e, 0xf8, 0x3b, 0x50, 0xb1, 0xd6, 0x6d, 0x39, 0x30, 0xd9, 0xa5, 0x54, 0x89, 0x0d, 0xbb, 0xec, 0x7f, 0x80, 0x30, 0x76, 0xf5, 0x94, 0x70, 0xf7, 0xe1, 0xf8, 0x8b, 0x5a, 0x60, 0xd0, 0x84, 0xeb, 0x2d, 0x75, 0xf3, 0x45, 0x6a, 0xcb, 0x9e, 0x3f, 0x9a, 0x82, 0xa7, 0xbc, 0xc9, 0x2e, 0xb9, 0x50, 0x4b, 0x7a, 0x40, 0xec, 0x9c, 0xb8, 0x87, 0x69, 0x63, 0x86, 0x51, 0x43, 0xd0, 0x57, 0xc9, 0x3a, 0x00, 0xd6, 0x51, 0x51, 0xd9, 0x66, 0x33, 0xd4, 0x22, 0x60, 0xf9, 0xc3, 0xf0, 0x4e, 0xa5, 0x04, 0x2c, 0x19, 0x74, 0xdd, 0x37, 0x86, 0x90, 0x01, 0x7a, 0xc3, 0x04, 0x0d, 0x0a, 0x66, 0x5e, 0x4d, 0x65, 0x31, 0x77, 0xfd, 0x7c, 0xb0, 0x07, 0x04, 0xbc, 0x54, 0x36, 0x23, 0x55, 0x91, 0xd0, 0xe3, 0x78, 0x37, 0x15, 0xea, 0x9c, 0x55, 0xda, 0xe1, 0x30, 0x20, 0xac, 0x76, 0xed, 0x66, 0xdc, 0xd5, 0x62, 0x0e, 0x5d, 0x06, 0x2f, 0x22, 0x89, 0x8c, 0x77, 0xd4, 0x36, 0xe7, 0x8c, 0x7a, 0x74, 0x0c, 0x75, 0xae, 0x3f, 0x0a, 0xf4, 0x24, 0x5e, 0xa4, 0xdf, 0x15, 0xd8, 0x7b, 0x04, 0x72, 0x94, 0x3e, 0x45, 0x53, 0x42, 0x82, 0xe1, 0xcd, 0x9f, 0x17, 0xc7, 0x88, 0xc2, 0x7a, 0xe8, 0xb9, 0xe2, 0x81, 0x9f, 0xb7, 0xbe, 0x81, 0xde, 0xb4, 0x77, 0xc7, 0x4c, 0xdb, 0xfc, 0x73, 0xc2, 0xe0, 0x52, 0x53, 0x56, 0xef, 0x4c, 0x19, 0x31, 0xd6, 0x0d, 0xa6, 0x22, 0xee, 0xce, 0x5c, 0x52, 0xed, 0x31, 0x02, 0x03, 0x01, 0x00, 0x01
    };

    tls::Parser parser(publicKeyAsn1.data(), publicKeyAsn1.size());
    tls::data::Asn1 keyMeta(parser);

    tls::Parser infoParser(keyMeta.children[1].data.data(), keyMeta.children[1].data.size());
    tls::data::Asn1 info(infoParser);

    std::vector<uint8_t> publicKeyData(info.children[0].data.begin() + 1, info.children[0].data.end());

    RsaKey publicKey(publicKeyData.data(), publicKeyData.size());
    RsaKey publicExp(info.children[1].data.data(), info.children[1].data.size());

    const char *text = "welcome to the secret world of cheese";
    RsaKey result = rsaEncrypt(publicKey, publicExp, (const uint8_t *)text, strlen(text));

    std::vector<uint8_t> binary = result.toBinary();

    fmt::print("{}", binString(binary));

    return 0;
}
